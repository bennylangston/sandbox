require 'pp'
code = <<EOF
(K0((+I(UU))(+K(U(U(I))))(+S(UK))(+4(S(SSI)I))(0(((11)1)(4((UK(SSI)I)((11)(4((11
)1)))))))(0(1(4((UK(SSI)I)((UK(SSI)I)(11))))))(0((11)((S(UKSI)I)((11)(4((S(UKSI)
I)(11)))))))(0(((11)1)(4(1(4((11)(4((11)1))))))))(0((11)(4(1((S(SSI)I)(1((UK(SSI
)I)(11))))))))(0((11)((S(SSI)I)(4(((11)1)((S(SSI)I)(11)))))))(0(((11)1)(4((UK(SS
I)I)((11)((S(SSI)I)((11)1)))))))(0((11)(4(4((S(UKSI)I)(11))))))(0((UK(SSI)I)(((1
1)1)((S(SSI)I)(4(11))))))(0((11)(4(1((S(UKSI)I)((11)(4((11)1))))))))(0(((11)1)((
S(UKSI)I)(1((S(UKSI)I)((11)(4(11))))))))(0((S(UKSI)I)((11)(4(1((UK(SSI)I)(11))))
)))(0(((11)1)(4((S(UKSI)I)((11)(4((11)1)))))))(0(1(4(4((S(SSI)I)(11))))))(0(((11
)1)(4(1((UK(SSI)I)((11)(4(11))))))))(0(((11)1)(4((S(SSI)I)((11)((UK(SSI)I)((11)1
)))))))(0(1((UK(SSI)I)(4(4(11))))))(0(((11)1)((S(SSI)I)(1(4(1((UK(SSI)I)(11)))))
)))(0(((11)1)((UK(SSI)I)((S(UKSI)I)((11)(4((11)1)))))))(0(1(4(4(4(11))))))(0(((1
1)1)((S(UKSI)I)(((11)1)(4(1(4(11))))))))(0(((11)1)((UK(SSI)I)(4((11)(4((11)1))))
)))(0((S(SSI)I)((UK(SSI)I)(4(11)))))(0((11)((UK(SSI)I)(4((UK(SSI)I)(11))))))(0(4
(1(4((11)((S(UKSI)I)((11)1)))))))(0(((11)1)((S(SSI)I)((11)(4(((11)1)((S(SSI)I)(1
1))))))))(0((11)(4((11)(4((UK(SSI)I)(11)))))))(0(1(4(1(4((11)((UK(SSI)I)((11)1))
))))))(0(1((S(UKSI)I)((11)((UK(SSI)I)(((11)1)(4(11))))))))(0((S(SSI)I)(1((S(UKSI
)I)(((11)1)((UK(SSI)I)(11)))))))(0(((11)1)((UK(SSI)I)((S(SSI)I)((11)((UK(SSI)I)(
(11)1)))))))(0((11)((S(SSI)I)((UK(SSI)I)(4(11))))))(0((11)((S(SSI)I)(4(4(11)))))
)(0((11)(4(1(4((11)(4((11)1))))))))(0(1(4(1(4((11)((S(UKSI)I)(11))))))))(0(1((S(
UKSI)I)(((11)1)(4(((11)1)((S(UKSI)I)(11))))))))(0(((11)1)((S(UKSI)I)((UK(SSI)I)(
(11)(4((11)1)))))))(0(1(4(4((UK(SSI)I)(11))))))(0(((11)1)(4(1((UK(SSI)I)(1((UK(S
SI)I)(11))))))))(0(((11)1)((S(UKSI)I)(4((11)(4((11)1)))))))(0(1(4(4(4(11))))))(0
(4(1(4(4(11))))))(0(((11)1)(4(4((11)((UK(SSI)I)((11)1)))))))(0((11)((S(UKSI)I)((
S(SSI)I)((UK(SSI)I)(11))))))(0(1(4(((11)1)(4((11)((S(UKSI)I)(11))))))))(0(((11)1
)(4((UK(SSI)I)((11)(4((11)1)))))))(0(((11)1)((UK(SSI)I)(4((S(UKSI)I)(11))))))(0(
((11)1)((S(UKSI)I)(4((11)(4(11)))))))(0(((11)1)(4((UK(SSI)I)((11)(4((11)1)))))))
(0(((11)1)((UK(SSI)I)((S(UKSI)I)(4(11))))))(0(((11)1)(4((S(SSI)I)(((11)1)(4(11))
)))))(0(((11)1)((S(UKSI)I)(4((11)((UK(SSI)I)((11)1)))))))(0(((11)1)((UK(SSI)I)(4
(4(11))))))(0(((11)1)(4(1(4(1(4(11))))))))(0(((11)1)((S(SSI)I)(4((11)((S(SSI)I)(
(11)1)))))))(0(1((S(UKSI)I)(4((S(SSI)I)(11))))))(0(((11)1)((S(UKSI)I)(1(4((11)(4
(11))))))))(0(((11)1)(4(4((11)((S(UKSI)I)((11)1)))))))(0(1(4((UK(SSI)I)(4(11))))
))(0(((11)1)(4(1((UK(SSI)I)(1(4(11))))))))(0(((11)1)((S(UKSI)I)((UK(SSI)I)((11)(
(S(SSI)I)((11)1)))))))(0(1(4(4(4(11))))))(0(((11)1)((S(SSI)I)(((11)1)(4(1((S(UKS
I)I)(11))))))))(0(((11)1)(4(((11)1)((S(UKSI)I)((11)(4((11)1))))))))(0(4(((11)1)(
4(((11)1)(4(11)))))))(0(1(4((S(UKSI)I)((S(UKSI)I)(11))))))(0(1(4(1((S(SSI)I)((11
)(4((11)1))))))))(0((UK(SSI)I)(1((S(SSI)I)((11)((UK(SSI)I)(11)))))))(0(((11)1)((
UK(SSI)I)(1((S(SSI)I)((11)((S(UKSI)I)(11))))))))(0(4(1((S(SSI)I)((11)((S(SSI)I)(
(11)1)))))))(0((11)((S(SSI)I)((11)((UK(SSI)I)(((11)1)((UK(SSI)I)(11))))))))(0((1
1)((UK(SSI)I)((11)((S(UKSI)I)(((11)1)(4(11))))))))(0(((11)1)((S(UKSI)I)((S(SSI)I
)((11)((S(SSI)I)((11)1)))))))(0(1(4(4(4(11))))))(0((11)((S(SSI)I)(((11)1)(4((11)
(4(11))))))))(0(4(1(4((11)(4((11)1)))))))(0((11)((S(UKSI)I)((11)(4(((11)1)(4(11)
)))))))(0(((11)1)(4((11)(4((S(SSI)I)(11)))))))(0((11)(4(1((S(SSI)I)((11)((S(UKSI
)I)((11)1))))))))(0(((11)1)((S(UKSI)I)(4((S(SSI)I)(11))))))(0(1((UK(SSI)I)(1((UK
(SSI)I)(4(11)))))))(0(((11)1)(4((S(SSI)I)((11)(4((11)1)))))))(0(1((S(SSI)I)(4((U
K(SSI)I)(11))))))(0(((11)1)((S(SSI)I)(1(4((11)((S(UKSI)I)(11))))))))(0(4(1(4((11
)(4((11)1)))))))(0(((11)1)((UK(SSI)I)((11)(4(((11)1)((UK(SSI)I)(11))))))))(0((11
)(4((11)(4((S(SSI)I)(11)))))))(0(1(4(1(4((11)((S(UKSI)I)((11)1))))))))(0(1(4((11
)((S(UKSI)I)(((11)1)(4(11))))))))(0((S(UKSI)I)(1(4(((11)1)((S(SSI)I)(11)))))))(0
(((11)1)((S(UKSI)I)((UK(SSI)I)((11)(4((11)1)))))))(0(1((S(SSI)I)((S(SSI)I)(4(11)
)))))(0((11)((UK(SSI)I)(((11)1)(4((11)(4(11))))))))(0((S(UKSI)I)((11)((S(UKSI)I)
((11)(4((11)1)))))))(0((S(SSI)I)(((11)1)((S(SSI)I)((11)((S(UKSI)I)(11)))))))(0((
(11)1)(4((11)((S(SSI)I)(1((UK(SSI)I)(11))))))))(0(((11)1)(4(1((UK(SSI)I)((11)(4(
(11)1))))))))(0((11)((UK(SSI)I)(((11)1)((S(SSI)I)(((11)1)(4(11))))))))(0(1((UK(S
SI)I)((11)(4((11)(4(11))))))))(0(((11)1)(4((UK(SSI)I)((11)((S(SSI)I)((11)1))))))
)(0(1(4(4(4(11))))))(0(((11)1)((UK(SSI)I)(1((S(UKSI)I)((11)((S(UKSI)I)(11)))))))
)(0(((11)1)((S(UKSI)I)((S(SSI)I)((11)(4((11)1)))))))(0(1((S(UKSI)I)(4((S(SSI)I)(
11))))))(0(((11)1)(4(((11)1)(4((11)((S(UKSI)I)(11))))))))(0(((11)1)((UK(SSI)I)((
S(SSI)I)((11)(4((11)1)))))))(0(((11)1)((S(UKSI)I)((UK(SSI)I)((UK(SSI)I)(11))))))
(0((11)((S(SSI)I)(1(4(4(11)))))))(0(((11)1)(4((UK(SSI)I)((11)(4((11)1)))))))(0((
11)((S(SSI)I)(4((S(SSI)I)(11))))))(0(1((UK(SSI)I)((11)(4(((11)1)(4(11))))))))(0(
((11)1)(4((S(UKSI)I)((11)(4((11)1)))))))(0(((11)1)(4(4((UK(SSI)I)(11))))))(0((S(
SSI)I)((11)(4((UK(SSI)I)(11))))))(0(((11)1)((UK(SSI)I)(4((11)((S(UKSI)I)((11)1))
)))))(0(1(4(4(4(11))))))(0((S(UKSI)I)((11)(4((11)(4(11)))))))(0(((11)1)((S(SSI)I
)((UK(SSI)I)((11)(4((11)1)))))))(0(((11)1)((UK(SSI)I)(4((S(SSI)I)(11))))))(0(((1
1)1)((S(UKSI)I)(1(4((S(UKSI)I)(11)))))))(0(((11)1)(4(4((11)(4((11)1)))))))(0(((1
1)1)(4((UK(SSI)I)(4(11))))))(0(4(4(1(4(11))))))(0(((11)1)((S(SSI)I)((S(SSI)I)((1
1)(4((11)1)))))))(0(((11)1)((S(SSI)I)((S(SSI)I)((UK(SSI)I)(11))))))(0(((11)1)(4(
(S(SSI)I)((S(UKSI)I)(11))))))(0(((11)1)((UK(SSI)I)((S(UKSI)I)((11)((UK(SSI)I)((1
1)1)))))))(0((11)(4((S(SSI)I)(4(11))))))(0(4((UK(SSI)I)(((11)1)(4(11))))))(0(((1
1)1)(4(4((11)(4((11)1)))))))(0(1((UK(SSI)I)(4(4(11))))))(0((11)(4(((11)1)((UK(SS
I)I)((11)(4(11))))))))(0(4((11)(4((11)((UK(SSI)I)((11)1)))))))(0(1((S(UKSI)I)((1
1)(4((11)((S(UKSI)I)(11))))))))(0(1((S(UKSI)I)((UK(SSI)I)(((11)1)(4(11)))))))(0(
((11)1)((UK(SSI)I)(4((11)((UK(SSI)I)((11)1)))))))(0((11)(4((S(SSI)I)(4(11))))))(
0((11)(4((S(UKSI)I)(1((UK(SSI)I)(11)))))))(0(((11)1)(4((UK(SSI)I)((11)((UK(SSI)I
)((11)1)))))))(0(1((S(SSI)I)(4((S(UKSI)I)(11))))))(0(1((S(UKSI)I)((11)(4(1((S(UK
SI)I)(11))))))))(0(((11)1)(4(4((11)((S(UKSI)I)((11)1)))))))(0((11)((UK(SSI)I)(4(
(S(SSI)I)(11))))))(0(((11)1)((UK(SSI)I)((11)((UK(SSI)I)(4(11)))))))(0(((11)1)(4(
(S(UKSI)I)((11)((S(SSI)I)((11)1)))))))(0(1(4((S(UKSI)I)(4(11))))))(0(((11)1)(4(4
(1((S(UKSI)I)(11)))))))(0(((11)1)(4((UK(SSI)I)((11)(4((11)1)))))))(0(1(4((UK(SSI
)I)((S(SSI)I)(11))))))(0(4((11)((S(SSI)I)((11)(4(11)))))))(0(((11)1)(4(4((11)((S
(UKSI)I)((11)1)))))))(0(1((S(UKSI)I)((S(UKSI)I)((UK(SSI)I)(11))))))(0(((11)1)((S
(UKSI)I)((11)((S(UKSI)I)((11)((UK(SSI)I)(11))))))))(0(((11)1)(4(4((11)(4((11)1))
)))))(0(1((S(SSI)I)((S(SSI)I)(4(11))))))(0((11)(4((11)((UK(SSI)I)((11)(4(11)))))
)))(0(((11)1)(4((S(UKSI)I)((11)((UK(SSI)I)((11)1)))))))(0((11)(4((UK(SSI)I)(4(11
))))))(0((11)((S(SSI)I)((11)((S(SSI)I)((S(SSI)I)(11)))))))(0(((11)1)((S(UKSI)I)(
(S(SSI)I)((11)(4((11)1)))))))(0(1((UK(SSI)I)((S(SSI)I)((UK(SSI)I)(11))))))(0((11
)(4(((11)1)(4(((11)1)((S(SSI)I)(11))))))))(0(((11)1)((UK(SSI)I)(4((11)((S(SSI)I)
((11)1)))))))(0(1(4(4((UK(SSI)I)(11))))))(0(((11)1)((S(SSI)I)(1((S(UKSI)I)(1(4(1
1))))))))(0(((11)1)(4(4((11)((S(UKSI)I)((11)1)))))))(0(1((UK(SSI)I)((UK(SSI)I)((
S(UKSI)I)(11))))))(0(((11)1)(4(((11)1)((S(SSI)I)(1(4(11))))))))(0(((11)1)(4((UK(
SSI)I)((11)((UK(SSI)I)((11)1)))))))(0(1(4((S(SSI)I)(4(11))))))(0((S(SSI)I)(((11)
1)(4(4(11))))))(0(((11)1)(4((UK(SSI)I)((11)((UK(SSI)I)((11)1)))))))(0(4(4((S(SSI
)I)(11)))))(0(1(4((S(UKSI)I)((S(SSI)I)(11))))))(0(((11)1)(4((S(UKSI)I)((11)((UK(
SSI)I)((11)1)))))))(0((UK(SSI)I)(4((S(UKSI)I)(11)))))(0(4(((11)1)(4((S(SSI)I)(11
))))))(0((S(UKSI)I)((11)((S(UKSI)I)((11)(4((11)1)))))))(0(4((11)(4((11)((S(UKSI)
I)(11)))))))(0(4(4((UK(SSI)I)(11)))))(0(4((11)((UK(SSI)I)((11)((S(SSI)I)((11)1))
)))))(0((11)(4((11)((S(UKSI)I)((11)((S(SSI)I)(11))))))))(0((11)(4(((11)1)(4(1(4(
11))))))))(0(((11)1)((S(SSI)I)(4((11)((UK(SSI)I)((11)1)))))))(0(1(4(4((S(UKSI)I)
(11))))))(0((11)((UK(SSI)I)(((11)1)((S(SSI)I)((11)(4(11))))))))(0((S(SSI)I)((11)
(4((11)((UK(SSI)I)((11)1)))))))(0(4((11)((S(UKSI)I)((11)((UK(SSI)I)(11)))))))(0(
1((S(SSI)I)(((11)1)(4((11)(4(11))))))))(0(4((11)((S(SSI)I)((11)(4((11)1)))))))(0
(4((11)((UK(SSI)I)((11)((UK(SSI)I)(11)))))))(0(4((11)((S(SSI)I)(4(11))))))(0(1((
S(UKSI)I)(1((UK(SSI)I)((11)((UK(SSI)I)((11)1))))))))(0(4((11)(4(4(11))))))(0(4(1
(4((11)(4(11)))))))(0((11)(4(1(4((11)((S(SSI)I)((11)1))))))))(0((11)((S(SSI)I)(1
((UK(SSI)I)(1(4(11))))))))(0(1((S(SSI)I)(((11)1)(4((11)(4(11))))))))(0(((11)1)((
S(SSI)I)((UK(SSI)I)((11)(4((11)1)))))))(0((S(UKSI)I)(4(4(11)))))(0(1(4(((11)1)((
UK(SSI)I)(4(11)))))))(0(((11)1)((UK(SSI)I)((S(UKSI)I)((11)(4((11)1)))))))(0(1(4(
4((S(SSI)I)(11))))))(0(((11)1)((S(SSI)I)(1(4((11)(4(11))))))))(0((11)(4(1(4((11)
(4((11)1))))))))(0((UK(SSI)I)(1((S(UKSI)I)((11)(4(11)))))))(0(4(((11)1)((S(UKSI)
I)(1(4(11)))))))(0(((11)1)(4(1(4((11)(4((11)1))))))))(0(4(1(4(((11)1)(4(11))))))
)(0((11)(4((S(UKSI)I)((11)((S(SSI)I)(11)))))))(0(((11)1)((UK(SSI)I)((UK(SSI)I)((
11)(4((11)1)))))))(0(1((S(SSI)I)((S(UKSI)I)(4(11))))))(0(1(4((11)(4(1(4(11))))))
))(0(((11)1)((S(UKSI)I)(4((11)(4((11)1)))))))(0((11)(4((UK(SSI)I)((S(SSI)I)(11))
))))(0(((11)1)(4((11)((S(SSI)I)((UK(SSI)I)(11)))))))(0(((11)1)(4(4((11)((S(UKSI)
I)((11)1)))))))(0(1((S(UKSI)I)((UK(SSI)I)((S(SSI)I)(11))))))(0(4((11)(4((11)(4(1
1)))))))(0(1((UK(SSI)I)(1((UK(SSI)I)((11)(4((11)1))))))))(0(((11)1)((S(UKSI)I)((
S(UKSI)I)((S(UKSI)I)(11))))))(0(1((S(SSI)I)(1((S(SSI)I)(1(4(11))))))))(0(((11)1)
((S(SSI)I)((UK(SSI)I)((11)(4((11)1)))))))(0(1((S(UKSI)I)((S(SSI)I)((S(UKSI)I)(11
))))))(0((11)((S(UKSI)I)(((11)1)(4((11)(4(11))))))))(0(1(4(1(4((11)(4((11)1)))))
)))(0((11)((S(UKSI)I)(((11)1)(4((S(UKSI)I)(11)))))))(0(((11)1)(4((11)(4(((11)1)(
(S(SSI)I)(11))))))))(0(1(4(1((S(SSI)I)((11)(4((11)1))))))))(0(1((S(UKSI)I)((11)(
(S(UKSI)I)(((11)1)(4(11))))))))(0((S(UKSI)I)(1(4(((11)1)(4(11)))))))(0(((11)1)((
S(SSI)I)(4((11)(4((11)1)))))))(0(1(4(4((UK(SSI)I)(11))))))(0((11)(4(((11)1)(4((1
1)((S(UKSI)I)(11))))))))(0(4((11)(4((11)((S(UKSI)I)((11)1)))))))(0(4(((11)1)(4((
11)(4(11)))))))(0(((11)1)((S(UKSI)I)((11)(4(1((S(UKSI)I)(11))))))))(0(((11)1)(4(
1((UK(SSI)I)((11)((UK(SSI)I)((11)1))))))))(0((11)(4(((11)1)(4(((11)1)(4(11))))))
))(0(1(4((11)(4((11)(4(11))))))))(0((UK(SSI)I)((11)(4((11)((UK(SSI)I)((11)1)))))
))(0(((11)1)((S(SSI)I)(4(((11)1)(4(11)))))))(0(((11)1)(4(1(4((S(UKSI)I)(11))))))
)(0((11)(4(1(4((11)((S(SSI)I)((11)1))))))))(0((11)((UK(SSI)I)(1((S(SSI)I)(1(4(11
))))))))(0(1(4((11)((S(SSI)I)(1((S(SSI)I)(11))))))))(0(((11)1)((S(UKSI)I)((UK(SS
I)I)((11)((S(UKSI)I)((11)1)))))))(0(1(4(4(4(11))))))(0((UK(SSI)I)(((11)1)(4(4(11
))))))(0(4((11)(4((11)((UK(SSI)I)((11)1)))))))(0((11)(4(1((S(SSI)I)((11)(4(11)))
)))))(0(((11)1)(4((11)((UK(SSI)I)((S(UKSI)I)(11)))))))(0(((11)1)(4(4((11)(4((11)
1)))))))(0(1((UK(SSI)I)((UK(SSI)I)(4(11))))))(0((S(UKSI)I)(1(4((11)((UK(SSI)I)(1
1)))))))(0(((11)1)(4(4((11)(4((11)1)))))))(0(1(4(4(4(11))))))(0(((11)1)(4((11)(4
(4(11)))))))(0(((11)1)(4((S(UKSI)I)((11)((UK(SSI)I)((11)1)))))))(0((11)((UK(SSI)
I)((UK(SSI)I)((UK(SSI)I)(11))))))(0(((11)1)(4((11)((UK(SSI)I)(4(11)))))))(0(((11
)1)((S(UKSI)I)((S(UKSI)I)((11)(4((11)1)))))))(0(1(4((S(SSI)I)(4(11))))))(0(((11)
1)(4(((11)1)(4((11)(4(11))))))))(0(((11)1)(4(4((11)(4((11)1)))))))(0(1(4((S(SSI)
I)((UK(SSI)I)(11))))))(0((11)(4((11)((S(UKSI)I)(1((UK(SSI)I)(11))))))))(0(((11)1
)((S(UKSI)I)(4((11)((S(UKSI)I)((11)1)))))))(0(1(4((UK(SSI)I)(4(11))))))(0(((11)1
)(4(1(4((11)(4(11))))))))(0(((11)1)((S(SSI)I)(4((11)((S(UKSI)I)((11)1)))))))(0(1
(4((S(UKSI)I)(4(11))))))(0(1((S(SSI)I)((11)((S(UKSI)I)(1((S(SSI)I)(11))))))))(0(
((11)1)((UK(SSI)I)(4((11)(4((11)1)))))))(0(4((S(SSI)I)((S(SSI)I)(11)))))(0((11)(
(UK(SSI)I)(4(4(11))))))(0(((11)1)(4(4((11)((S(UKSI)I)((11)1)))))))(0(1(4((UK(SSI
)I)(4(11))))))(0((S(SSI)I)(((11)1)(4(1(4(11)))))))(0(((11)1)(4((S(SSI)I)((11)(4(
(11)1)))))))(0(1(4(4((S(SSI)I)(11))))))(0((11)((S(UKSI)I)(4(((11)1)(4(11)))))))(
0((UK(SSI)I)(1(4((11)(4((11)1)))))))(0((S(SSI)I)((11)(4(((11)1)((UK(SSI)I)(11)))
))))(0(4((S(UKSI)I)((S(SSI)I)(11)))))(0(1((S(SSI)I)(1(4((11)(4((11)1))))))))(0((
11)(4((11)(4(((11)1)(4(11))))))))(0((11)(4(1((S(UKSI)I)((11)((S(SSI)I)(11)))))))
)(0((UK(SSI)I)((11)(4((11)(4((11)1)))))))(0((11)(4((11)(4((11)(4(11))))))))(0(1(
(S(SSI)I)(((11)1)(4((11)((UK(SSI)I)(11))))))))(0(((11)1)(4((UK(SSI)I)((11)(4((11
)1)))))))(0((11)(4((UK(SSI)I)((S(UKSI)I)(11))))))(0(((11)1)(4((S(UKSI)I)(1(4(11)
))))))(0(((11)1)((S(UKSI)I)(4((11)((UK(SSI)I)((11)1)))))))(0(1((S(UKSI)I)(4(4(11
))))))(0(((11)1)((S(UKSI)I)(1((UK(SSI)I)((11)((S(UKSI)I)(11))))))))(0(((11)1)(4(
(S(UKSI)I)((11)((S(SSI)I)((11)1)))))))(0(1((S(UKSI)I)(4(4(11))))))(0(((11)1)(4((
(11)1)(4(((11)1)(4(11))))))))(0(((11)1)(4(4((11)(4((11)1)))))))(0(1((S(UKSI)I)(4
(4(11))))))(0((11)((S(SSI)I)(1((S(UKSI)I)((11)((S(UKSI)I)(11))))))))(0(((11)1)((
S(SSI)I)((UK(SSI)I)((11)((S(SSI)I)((11)1)))))))(0(1(4((S(UKSI)I)((UK(SSI)I)(11))
))))(0(((11)1)((S(SSI)I)(((11)1)(4(4(11)))))))(0(((11)1)(4((S(SSI)I)((11)(4((11)
1)))))))(0(1(4(4(4(11))))))(0(4((S(UKSI)I)((11)(4(11))))))(0(((11)1)(4(4((11)((S
(UKSI)I)((11)1)))))))(0(1(4((S(SSI)I)(4(11))))))(0(1((S(UKSI)I)(1(4(1((S(SSI)I)(
11))))))))(0(((11)1)((UK(SSI)I)((UK(SSI)I)((11)((S(SSI)I)((11)1)))))))(0(1(4((UK
(SSI)I)(4(11))))))(0(4(1((S(SSI)I)((S(UKSI)I)(11))))))(0(((11)1)(4((S(SSI)I)((11
)(4((11)1)))))))(0(1(4((S(UKSI)I)((S(SSI)I)(11))))))(0(1((UK(SSI)I)(((11)1)((S(U
KSI)I)((11)(4(11))))))))(0(((11)1)(4(((11)1)((UK(SSI)I)((11)((UK(SSI)I)((11)1)))
)))))(0((UK(SSI)I)(((11)1)(4(((11)1)((UK(SSI)I)(11)))))))(0(1(4((S(UKSI)I)((UK(S
SI)I)(11))))))))
EOF

def dp(*a)
  puts(*a) if ARGV.size > 0
end

a = code.chars.inject([]) do |result,c|
  next result if /\r|\n| |\t/ =~ c
  _ = result[-1]
  __ = result
  while _.kind_of?(Array) && _[-1].kind_of?(Array)
    __, _ = _, _[-1]
  end
  _.pop if _.kind_of?(Array) && _[-1].nil?
  case c
  when /\r?\n| |\t/
    nil
  when ")"
    __ << nil
  when "("
    if _.kind_of?(Array)
      _ << []
    else
      result << (_ = [])
    end
  else
    if _.kind_of?(Array)
      _ << c
    else
      result << (_ = c)
    end
  end
  result
end

a.pop

l = ->(_,i=0) do
  w = " "*i
  if _.kind_of?(Array)
    _.each do |c|
      l[c,i+1]
    end
  else
    puts "#{i}#{w} #{_}"
    stack = []
  end
end
#l[a]

names = {}

class Spcamp
  class NameError < Exception
  end
end

process_arg = ->(arg) do
  if arg.kind_of?(String)
    if arg == "0"
      arg = N[0]
    elsif names[arg.to_s]
      arg = names[arg.to_s]
    else
      puts "---- NameError!"
      puts arg
      raise Spcamp::NameError
    end
  end
  arg
end

S = ->(x) { ->(y) { ->(z) { x[z][y[z]] } } }
K = ->(x) { ->(y) { x } }
U = ->(x) { x[S][K] }

N = ->(i=0) do
  the = ->(j=nil) { j.nil? ? i : N[i+(j.kind_of?(Proc) ? j[] : j)] }

  class << the
    @i = nil
    def inspect; "#<N: #{to_i}>"; end
    def to_i; @i ||= self.binding.eval("i"); end
    def numproc?; true; end
    alias to_s inspect
  end; the
end
class Object
  def numproc?; false; end
end
out = []
Z = ->(arg) do
  out << arg[].chr
  arg
end

names["U"] = U
names["0"] = Z
(1..9).each do |i|
  names[i.to_s] = N[i]
end


r = ->(insns,parent=[]) do
  dp "++ #{insns.inspect}"
  m = insns.map do |c|
    if c.kind_of?(Array)
      r[c,insns]
    else
      c
    end
  end
  dp "-- #{insns.inspect}\n > #{m.inspect}"
  moto = m.dup
  ret = m
  until m.size == 1
=begin
    if m.all?(&:numproc?)
      m = [N[m.map(&:to_i).inject(:+)]]
      break
    end
=end
    if m[0].numproc? && m[1].numproc?
      if m.all?(&:numproc?)
        m = [N[m.map(&:to_i).inject(:+)]]
        break
      end

      i = 0
      while (c = m.shift).numproc?
        i += c.to_i
      end
      m.unshift N[i]
      next
    end

    c = m.shift
    if c.kind_of?(Array)
      c = r[c,m]
    end
    dp "  ?? #{c} <- #{m}"

    if c == "+"
      name = m.shift.to_s
      names[name] = ret = process_arg[m.shift]
      dp "  ** #{name} = #{ret}"
    else
      arg = m.shift

      if arg
        arg = process_arg[arg]
        if names[c]
          dp "  !! #{names[c]}(#{arg})"
          ret = names[c]
          begin
            ret = ret[arg]
          rescue ArgumentError; end
        else
          ret = c[arg]
        end
      else
        ret = process_arg[c]
      end
    end
    dp "  ?? #{ret} -> #{m}"
    m.unshift ret
  end
  process_arg[m.shift]
end

out << r[a][].chr
#puts out.join
